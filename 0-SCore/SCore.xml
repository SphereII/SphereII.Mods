<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SCore</name>
    </assembly>
    <members>
        <member name="T:Harmony.Animation.AvatarControllerSetTrig.AvatarControllerSetTrigger">
            AvatarController.SetTrigger()
            
            This includes a logging feature to show which trigger is called, when the AnimatorMapper Feature is enabled in the Config/blocks.xml
             
            This includes a RandomIndex integer, with a range of 0 to 10, to allow more flexibility in custom animators
        </member>
        <member name="T:Harmony.Animation.ModelBaseInitCommon">
            * 
            * On dedicated servers, when using an external animation class (Mecanim SDX), the server incorrectly assigns a Dummy avatar, rather than our own.
            * We can get around this by disabling rag dolling on external entities, but it also generates warnings in the log file.
        </member>
        <member name="T:Harmony.Blocks.SCoreOnEntityCollidedWithBlock">
            SCoreBlocks_OnEntityCollidedWithBlock
            
            This class includes a Harmony patch to allow crop trample, when enables. Any block that has a tag of fcropsDestroy will allow trample.
            
            Also includes a Harmony patch for BlockDamage, which will prevent NPCs.
            
            Usage XML: 
            Adding to existing blocks:
            <append xpath="/blocks/block/property[@name='FilterTags' and contains(@value, 'SC_crops')]/@value">,fcropsDestroy</append>
            Adding to new blocks:
            <property name="FilterTags" value="foutdoor,fcrops,fcropsDestroy" />
        </member>
        <member name="T:Harmony.Blocks.Particles">
            * Adding to new blocks:
            *
            <property name="ParticleName" value="#@modfolder(0-SCore):Resources/PathSmoke.unity3d?P_PathSmoke_X" />
        </member>
        <member name="T:Harmony.EntityAlive.EntityAlivePatches">
            SCoreEntityAlive_Patches
            
            This class includes a Harmony patch to allow Entity Alive's to save and read their faction ID, allowing persistence across game loads.
        </member>
        <member name="T:Harmony.EntityAlive.EntityAlivePatches.SetSleeperActive">
            <summary>
            This is a patch to SetSleeperActive that will wake NPCs in "active" sleeper volumes.
            </summary>
        </member>
        <member name="T:Harmony.ErrorHandling.NoExceptionHijack">
            SCoreNoExceptionHijack
            
            This class includes a Harmony patch to disable the console from popping down when a Null ref or other critical error occurs. This is mainly to allow
            modders to keep control of their game despite erroring out while testing.
        </member>
        <member name="T:Harmony.Faction.FactionTweaks">
            SCoreFaction_Tweaks
            
            This class includes a Harmony patches to enable or improve functionality in the factions. It includes allowing the factions to be saved to disk, as well
            as fixing a casting bug when setting the relationship (A18/A19).
        </member>
        <member name="T:Harmony.ItemActions.AdvancedItems">
            SCore_AdvancedItems
            
            This class includes a Harmony patches to allow more repair flexbility for modders.
            <property name="RepairItems" value="resourceWood,10,resourceForgedIron,10" />
            <property Class="RepairItems">
                <property name="resourceFeather" value="2" />
            </property>
            *
            <property Class="ScrapItems">
                <property name="resourceFeather" value="1" />
            </property>
        </member>
        <member name="T:Harmony.ItemActions.DurabilityAffectsDamage">
            SCore_AdvancedItems_DurabilityAffectsDamagey
            
            This class includes a Harmony patches to durability to have an effect against the damage. The lower the durability, the lower the damage.
        </member>
        <member name="T:Harmony.NPCFeatures.UtilsDrawLine">
            SCore_EntityAlivePatcher
            
            This class includes a Harmony patches to EntityAlive to provide more features for NPCs, including blocking EntityAliveFarmingAnimalSDX from attacking blocks,
            to disabling the damage to an ally,  etc
        </member>
        <member name="T:Harmony.NPCFeatures.EntityNPCJumpHeight">
            EntityNPCJumpHeight
            
            This class includes a Harmony patches to the EntityMoveHelper, to allow entities to jump higher than normal.
            
            XML Usage for entityclasses.xml
            <property name="JumpHeight" value="10" />
        </member>
        <member name="T:Harmony.NPCFeatures.EntityNPCMakeVulnerable">
            EntityNPCMakeVulnerable
            
            This class includes a Harmony patches to the the EntityNPC to make them vulnerable to attacks and damage.
        </member>
        <member name="T:Harmony.NPCFeatures.EntityNPCSpeedFix">
            EntityNPCSpeedFix
            
            This class includes a Harmony patches to EntityNPC to adjust its update Speed Forward, which hasn't gotten the same updates as EntityAlive.
        </member>
        <member name="T:Harmony.PlayerFeatures.SCoreNerdPoll">
            SCoreNerdPoll
            
            This class includes a Harmony patches to the the Block Placement code, so that a player cannot "nerd pole"
        </member>
        <member name="T:Harmony.PlayerFeatures.OneBlockCrouch">
            SCore_OneBlockCrouch
            
            This class includes a Harmony patches to the EntityPlayer Local to allow players to crawl through a single block
        </member>
        <member name="T:Harmony.PlayerFeatures.PlayerMoveControllerUpdate">
            SCorePlayerMoveController_Update
            
            This class includes a Harmony patches to the EntityPlayer Local to allow skipping of buffs that contain the name "buffcutscene" by pressing space or escape.
            
            This was used in the Winter Project 2019 to skip the opening cutscene, which was applied through a buff.
        </member>
        <member name="T:Harmony.PlayerFeatures.SoftHands">
            SCore_SoftHands
            
            This class includes a Harmony patches to ItemAction to deal damage when the player hits something with their bare heands.
        </member>
        <member name="T:Harmony.PrefabFeatures.RemoveTraderProtection">
            SCoreRemoveTraderProtection
            
            This class includes a Harmony patches to disable the landclaim block on the trader, making them vulnerable.
        </member>
        <member name="T:Harmony.SoundFeatures.GiveBuffOrQuestBySound">
            SCoreGiveBuffOrQuestBySound
            
            This class includes a Harmony patch to hook the delivery of a buff or quest through the sound system.
            
            Usage XML:
            <!-- Adds the buffCursed to any entity that hears the screamer -->
            <append xpath="/Sounds/SoundDataNode[@name='zombiefemalescoutalert']">
                <buff value="buffCursed" />
                <Quest value="myQuest" />
            </append>
        </member>
        <member name="T:Harmony.Standard.XMLDebugging">
            SCoreXML_Debugging
            
            This class includes a Harmony patch allows additiona logging features to be turned on during XML parsing, enabled through the Config/blocks.xml' VerboseXMLParser and PhysicsBody.
        </member>
        <member name="T:Harmony.TileEntities.PoweredWorkstations">
            SCorePoweredWorkstations
            
            This class includes a Harmony patch allows a tile entity to require power, and recieve it when a power source is within a radious.
            
            Usage XML:
            <property name="RequirePower" value="true" />
        </member>
        <member name="T:Harmony.TileEntities.TileEntityAlwaysActive">
            SCoreTileEntityAlwaysActive
            
            This class includes a Harmony patch allow an Always Active block, thus allowing a buff to be placed on it.
            
            Usage XML:
            <!-- Allows the  Trigger to work -->
            <property name="AlwaysActive" value="true" />
            <!-- How far out the tile entity will re-scan to detect the player -->
            <property name="ActivationDistance" value="5" />
            <property name="ActivateOnLook" value="true" />
            <!-- Triggers the block if the buff buffCursed is active on the player, or if the player has a cvar called "cvar" with a value of 4, or if myOtherCvar is available, regardless of value -->
            <property name="ActivationBuffs" value="buffCursed,cvar(4),myOtherCvar" />
        </member>
        <member name="T:Harmony.UI.TargetBar">
            SCoreXuiC_TargetBar
            
            This class includes a Harmony patch to reduce the fade time.
        </member>
        <member name="T:Harmony.UI.XPIconRemover">
            SCoreXPIconRemover
            
            This class includes a Harmony patch hide the IP Notification pop up
        </member>
        <member name="T:Harmony.UtilityAI.Debugging.UAIFromXml_parseAIPackageNode">
            <summary>
            This patch adds the package to the dictionary of stored attributes in SCoreUtils.
            We will need those attributes later to see if the user specified package filters.
            </summary>
        </member>
        <member name="T:Harmony.UtilityAI.Debugging.UAIFromXml_parseActionNode">
            <summary>
            This patch adds the action to the dictionary of stored attributes in SCoreUtils.
            We will need those attributes later to see if the user specified action filters.
            </summary>
        </member>
        <member name="T:Harmony.UtilityAI.Debugging.UAIPackage_DecideAction">
            <summary>
            <para>
            This patch replaces the DecideAction method with one that will skip targets which are
            not passed through the package and/or action filters.
            </para>
            <para>
            Note that filters are inclusive, not exclusive; and that targets may be filtered by
            packages and actions, and must pass through both filters.
            </para>
            </summary>
        </member>
        <member name="T:Harmony.ZombieFeatures.SCoreHeadshotOnly">
            SCoreHeadshotOnly
            
            This class includes a Harmony patch force head-shot only, enabled via the Config/blocks.xml
        </member>
        <member name="T:Harmony.ZombieFeatures.InertEntity">
            SCoreHeadshotOnly
            
            This class includes a Harmony patch that freezes an entity if its day or night.
            
            Used in Winter Project 2019 for the Snowman effect.
             
            Usage XML:
            <property name="EntityActiveWhen" value="night" />
            <property name="EntityActiveWhen" value="day" />
        </member>
        <!-- Badly formed XML comment ignored for member "T:Harmony.ZombieFeatures.SCoreRandomDeathSpawn" -->
        <member name="T:Harmony.ZombieFeatures.RandomSize">
            SCoreRandomSize
            
            This class includes a Harmony patch that allows an entity to spawn in with a random size.
            
            You may specify a property on the entityclasses.xml to specify a range. if this property does not exist, the following range
            is used:
             
            { 0.7f, 0.8f, 0.9f, 0.9f, 1.0f, 1.0f, 1.0f, 1.1f, 1.2f };
             
            Usage XML:
            <!-- enforce a specific size range for an entity class -->
            <property name="RandomSizes" value="1.2,1.2,1.4" />
        </member>
        <member name="T:Harmony.ZombieFeatures.Transmogrifier">
            SCoreTransmogrifier
            
            This class includes a Harmony patch that allows an entity to spawn in with a random walk type
            
            You may specify a property on the entityclasses.xml to specify a range. if this property does not exist, the following range
            is used:
             
            { 1, 2, 2, 3, 4, 5, 6, 7, 8 }
             
            Usage XML:
            <!-- enforce a specific walk type range for an entity class -->
            <property name="RandomWalkTypes" value="2,3,4,5,6,7" />
        </member>
        <member name="T:SphereII_DialogFromXML_Extensions">
            SphereII_DialogFromXML_Extensions
            
            This class includes a Harmony patches to allow loading up extra custom dialog elements
            
            Usage:
              <action type="AddCVar, Mods" id="quest_Samara_Diary" value="1" operator="set" />
              <requirement type="HasBuffSDX, Mods" value="buffCursedSamaraMorgan" requirementtype="Hide" Hash="Requirement_-101666296" />
              <requirement type="HasCVarSDX, Mods" value="1" requirementtype="Hide" operator="GTE" id="quest_Samara_Diary" Hash="Requirement_-2138114132" />
              <requirement type="HasBuffSDX, Mods" value="buffBadAttitude" match="not" requirementtype="Hide" Hash="Requirement_-1230867493" />
        </member>
        <member name="T:FactionRelationshipCVars">
            <summary>
            <para>
            This class will add read-only custom variables (cvars), that represent the player's
            relationship with each non-player faction. Those cvars can be used any place that a cvar can
            normally be read: effect requirements, localization, XUi player stats entries, etc.
            </para>
            <para>
            The name of the cvar will be "_relationship[faction name]" where "[faction name]" is the name
            of the faction, as defined in the faction's "name" attribute in <c>npc.xml</c>.
            </para>
            <para>
            It must be enabled in the <c>FactionRelationshipCVars</c> property, under
            <c>AdvancedNPCFeatures</c> in <c>ConfigFeatureBlock</c>.
            </para>
            <para>
            NOTE: If the relationship is exactly zero, the cvar will not be set. This is because 7D2D
            treats setting any cvar value to zero as removing the cvar. This can happen if the faction
            relationship is initially "Hate," or is reduced to zero later. The cvar will be set again if
            the relationship becomes anything other than zero. Trying to read the value of a non-existent
            cvar will result in a value of zero anyway, so this should not affect any uses of the cvar.
            </para>
            </summary>
        </member>
        <member name="M:FactionRelationshipCVars.FactionRelationshipCVars_EntityPlayerLocal_Update.SetRelationshipsFromCVars(EntityPlayerLocal)">
            <summary>
            This method sets the 7D2D vanilla faction relationships from the cvars.
            It is necessary because cvars are saved, but the faction relationships are not -
            they are re-read from the XML every time the game loads.
            </summary>
        </member>
        <member name="T:SphereII_FoodSpoilage">
             * SphereII_FoodSpoilage
             * 
             * This class includes a Harmony patches to enable Food spoilage, including trigger times and delays. The main trigger spoilage code occurs
             * on the XUiC_ItemStack, so all stacks of items will be affected, if the right XML is used. This needs to be enabled through the Config/blocks.xml, as well as XML changes
             * to food or other items you want to degrade over time.
             * 
             * XML Usage ( Taken from the SphereII Food Spoilage Mod )
             * 
             *   <!-- Spoilage: Every 500 Ticks, take a loss of 1, out of a total of 1000. -->
             * <append xpath="/items">
             *   <item name="foodSpoilageTest">
             *     <property name="Extends" value="foodShamSandwich"/>
             *     <property name="DisplayType" value="melee"/>
             *     <property name="Tags" value="perkMasterChef"/>  <!-- tags must match the tags in the effect_group -->
            
             *     <property name="Spoilable" value="true" />
             *     <property name="SpoiledItem" value="foodRottingFlesh" />    <!-- Optional to over-ride ConfigBlockSpoilage globa. When spoiled, this item will turn into this item.-->
             *     <property name="TickPerLoss" value="500" /> <!-- Optional to over-ride ConfigBlockSpoilage global. Example value=10   10 ticks per Spoilage increase. -->
             
             *     <property name="ShowQuality" value="false"/>
            
             *     <property name="SpoilageMax" value="1000" />
             *     <property name="SpoilagePerTick" value="1" />
             *   </item>
              * </append>
             * 
             * <!-- Append Template -->
             * <append xpath="/items/item[starts-with(@name, 'food') and not(contains(@name, 'foodCan'))]">
             *   <property name="Spoilable" value="true" />
             *   <property name="ShowQuality" value="false"/>
             *   <property name="SpoiledItem" value="foodRottingFlesh" />
             *   <!-- Optional to over-ride ConfigBlockSpoilage globa. When spoiled, this item will turn into this item.-->
             *   <property name="TickPerLoss" value="5000" />
             *   <!-- Optional to over-ride ConfigBlockSpoilage global. Example value=10   10 ticks per Spoilage increase. -->
             *   <property name="SpoilageMax" value="1000" />
             *   <property name="SpoilagePerTick" value="1" />
             * </append>
             * <append xpath="/items/item[starts-with(@name, 'food') and not(contains(@name, 'foodCan'))]/property[@name='Tags']/@value">,perkMasterChef</append>
             *
        </member>
        <member name="M:SphereII_FoodSpoilage.SphereII_itemValue_Read.Postfix(System.IO.BinaryReader,ItemValue@)">
            <summary>
            The vanilla code reads the Meta value as a ushort, and we need the int value.
            </summary>
            <param name="_br"></param>
            <param name="__instance"></param>
        </member>
        <member name="M:SphereII_FoodSpoilage.SphereII_ItemValue_Write.Postfix(System.IO.BinaryWriter,ItemValue)">
            <summary>
            The vanilla code writes the Meta value as a ushort, we need to save the int value.
            </summary>
            <param name="_bw"></param>
            <param name="__instance"></param>
        </member>
        <member name="M:SphereII_FoodSpoilage.SphereII_XUiC_ItemStack_Update.GetNextSpoilageTick(System.UInt64,System.Int32)">
            <summary>
            Gets the tick for the next loss as a signed integer value.
            </summary>
            <param name="worldTime"></param>
            <param name="ticksPerLoss"></param>
            <returns></returns>
        </member>
        <member name="M:SphereII_FoodSpoilage.SphereII_XUiC_ItemStack_Update.ToInt(System.UInt64)">
            <summary>
            Converts an unsigned long to a signed int by discarding high-order bits.
            This is "safer" than calling Convert.ToInt32 (which throws an OverflowException)
            or explicit casting (which results in overflow).
            </summary>
            <param name="uLong"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityAIPatches.GetHighestPossibleScore(UAI.UAIPackage)">
            <summary>
            Helper method to get the highest possible score for a package.
            The package's highest possible score is the highest weight out of any of its actions,
            multiplied by the package's weight.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityAIPatches.UAIFromXml_parseAIPackagesNode.Postfix(System.Xml.XmlElement)">
            <summary>
            This postfix method allows modders to specify the maximum numbers of
            entities and/or waypoints that should be considered for actions.
            In this implementation, the specified maximums cannot go below the existing maximums.
            (Should this be changed?)
            </summary>
            <example>
            Set the maximum entities to consider to 30, and the maximum waypoints to consider
            to 10.
            <code>
            &lt;ai_packages max_entities="30" max_waypoints="10>
            </code>
            </example>
            <param name="_element"></param>
        </member>
        <member name="M:UtilityAIPatches.UAIAction_GetScore.Prefix(UAI.UAIAction,System.Single@,UAI.Context,System.Object,System.Single)">
            <summary>
            This prefix method fixes what I believe to be a bug in the vanilla code, having to do
            with a misplaced cast to float. It also changes the vanilla behavior, to not give a
            higher weight to actions that have more considerations.
            </summary>
            <param name="__instance"></param>
            <param name="__result"></param>
            <param name="_context"></param>
            <param name="_target"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="T:AvatarAnimalControllerSDX">
            <summary>
            Custom Animation Class for animals. Deprecated.
            </summary>
        </member>
        <member name="T:MecanimSDX">
            <summary>
            Custom class for humanoid animators. Deprecated.
            </summary>
        </member>
        <member name="T:BlockCropControlPanel">
            <summary>
            Block that allows you to control the water pipes and systems in the enhanced farming features.
            </summary>
        </member>
        <member name="F:BlockCropControlPanel.cmds">
            <summary>
            Default control options for the Control panel:
            Enable Debugging
            Disable Debugging
            turnonWater: Allows water to flow past
            turnoffWater: Blocks water from flowing past
            </summary>
        </member>
        <member name="M:BlockCropControlPanel.Init">
            <summary>
            Reads in the following Properties from the blocks.xml entry:
            
            ControlPanelName: Used for display purposes
            ActivateSound: The sound used to activate the block
            </summary>
        </member>
        <member name="P:EntityEnemySDX.PatrolCoordinates">
            <inheritdoc/>
        </member>
        <member name="P:EntityEnemySDX.GuardPosition">
            <inheritdoc/>
        </member>
        <member name="P:EntityEnemySDX.GuardLookPosition">
            <inheritdoc/>
        </member>
        <member name="P:EntityEnemySDX.Position">
            <inheritdoc/>
        </member>
        <member name="M:EntityEnemySDX.SetupAutoPathingBlocks">
            <inheritdoc/>
        </member>
        <member name="M:EntityEnemySDX.UpdatePatrolPoints(UnityEngine.Vector3)">
            <inheritdoc/>
        </member>
        <member name="P:EntityAliveSDX.PatrolCoordinates">
            <inheritdoc/>
        </member>
        <member name="P:EntityAliveSDX.GuardPosition">
            <inheritdoc/>
        </member>
        <member name="P:EntityAliveSDX.GuardLookPosition">
            <inheritdoc/>
        </member>
        <member name="P:EntityAliveSDX.Position">
            <inheritdoc/>
        </member>
        <member name="M:EntityAliveSDX.OnAddedToWorld">
            <summary>
                Overrides EntityAlive.OnAddedToWorld().
                When entities are spawned into sleeper volumes, which happens in SleeperVolume.Spawn(),
                several of their properties are set so they are spawned in a sleeping state.
                If the NPC should always be awake, those properties can be reset here.
            </summary>
        </member>
        <member name="M:EntityAliveSDX.UpdatePatrolPoints(UnityEngine.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:EntityAliveSDX.SetupAutoPathingBlocks">
            <inheritdoc/>
        </member>
        <member name="F:EntityTargetingUtilities.DamageRelationshipCVarName">
            <summary>
            If the entity has a cvar of this name, get a relationship value from the cvar, and use it
            as the faction relationship value for damage. The faction relationship must be
            <em>strictly below</em> this value, or the enity cannot damage it.
            </summary>
        </member>
        <member name="M:EntityTargetingUtilities.CanDamage(EntityAlive,Entity)">
            <summary>
            <para>
            Determines whether you can damage the target.
            </para>
            <para>
            This is not necessarily a symmetrical relationship. If you cannot damage the target,
            it does not mean the target cannot damage you.
            </para>
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.CanDamageAlly(Entity,Entity)">
            <summary>
            Determines whether you can damage your ally. You are allies if the target is your
            leader, or you and your target have the same leader.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.CanTakeDamage(EntityAlive,Entity)">
            <summary>
            This method checks to see if damage, presumably caused by another entity,
            is allowed to actually do damage to the checking entity.
            </summary>
            <param name="self">The entity that is checking to see if it can be damaged.</param>
            <param name="damagingEntity">The entity causing the damage, if any.</param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.GetFriendlyFireRelationship(Entity)">
            <summary>
            Gets the default faction relationship that represents friendly fire (without taking the
            cvar into account).
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsDamageImmuneVehicle(Entity,Entity)">
            <summary>
            Returns true if the target is a vehicle that is immune to damage from the checking entity.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsAlly(Entity,Entity)">
            <summary>
            <para>
            Determines whether yourself and the target entity are allies.
            You are allies if the target is your leader, or you and your target have the same leader.
            </para>
            
            <para>
            This does <em>not</em> assume a reciprocal relationship.
            If you are the leader of the target, this will return false.
            </para>
            </summary>
            <param name="self"></param>
            <param name="targetEntity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsEnemy(EntityAlive,Entity)">
            <summary>
            Returns true if you consider the target to be your enemy.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsFightingFollowers(Entity,Entity)">
            <summary>
            Returns true if the target is fighting a leader or one of their followers.
            </summary>
            <param name="leader">Entity representing a leader.</param>
            <param name="target">Target entity.</param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsFriend(EntityAlive,Entity)">
            <summary>
            Tests to see if the target entity is a friend. A "friend" is defined as yourself,
            your leader, allies (those who share a leader), entities in "loved" factions
            (including members of your own faction, if not overridden by your leader),
            players who are immune to friendly fire from you or your leader, and the followers
            of those players.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsEnemyByFaction(Entity,Entity)">
            <summary>
            Determines whether the target is an enemy, according to faction relationship.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsEnemyInAnimalsFaction(Entity)">
            <summary>
            Returns true if the entity is an enemy type that is using the vanilla "animals" faction.
            That faction is neutral to all, so cannot target enemies based on faction standing.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsFriendlyFireByFaction(Entity,Entity)">
            <summary>
            Determines whether you attacking the target would constitute friendly fire, according
            to faction relationship.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsCurrentRevengeTarget(EntityAlive,Entity)">
            <summary>
            Returns true if the target is your current revenge target, and you do not forgive it.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.ShouldForgiveDamage(EntityAlive,Entity)">
            <summary>
            Determines whether you should <em>immediately</em> forgive any damage that is taken from
            the target entity, so they are never considered a revenge target.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.GetPlayerLeader(Entity)">
            <summary>
            Private helper method to get a player who is either yourself or your leader.
            Will return null if neither yourself nor your leader (if any) is a player.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.GetPlayerLeader(Entity,Entity)">
            <summary>
            Private helper method to get a player who is either yourself or your leader.
            Will return null if neither yourself nor your leader is a player.
            This method should be used when you already have an object representing your leader,
            as it avoids a call to GetLeaderOrOwner.
            </summary>
            <param name="self"></param>
            <param name="leader"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.IsAllyOfLeader(Entity,Entity)">
            <summary>
            Private helper method to check if a target is an ally of a leader.
            This is here mainly to prevent repeated calls to GetLeaderOrOwner.
            </summary>
            <param name="leader"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:EntityTargetingUtilities.GetAggressionTarget(Entity)">
            <summary>
            <para>
            Private helper method to get the target of aggression, depending upon whether the targeting
            entity is a player or an NPC.
            </para>
            
            <para>
            This is necessary because we shouldn't use the "attack target" of NPCs. There are many
            situations where this is automatically set to the player ("attack" sleeper volumes, quest
            spawns, etc.) even if they aren't aggressive to the player. Also, some entities (like the
            drone) use the "attack" target for non-aggressive tasks (like healing). So for NPCs, we
            should only use their revenge target, which is always the entity that damaged them.
            </para>
            
            <para>
            On the other hand, if the entity is a player, they only have an attack target if the player
            voluntarily initiated an attack. They may also have a revenge target. We can use either,
            but the revenge target takes priority.
            </para>
            </summary>
            <param name="attacker"></param>
            <returns></returns>
        </member>
        <member name="M:EntityUtilities.GetFactionRelationship(EntityAlive,EntityAlive)">
            <summary>
            Reliably gets the faction relationship between yourself and a target.
            </summary>
            <param name="self"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:IEntityOrderReceiverSDX">
            <summary>
            <para>
            This interface signifies that the entity can receiver orders.
            </para>
            
            <para>
            The orders do not have to come from a player. For example, they could come from a pathing cube.
            </para>
            
            <para>
            The entity does not have to <em>obey</em> the orders. It is only assumed that they will adjust
            their behavior upon receiving at least one of the possible orders as specified in
            <see cref="T:EntityUtilities.Orders"/>.
            </para>
            
            <para>
            Entities that implement this interface should also descend from <see cref="T:EntityAlive"/>,
            or one of its descendants.
            </para>
            </summary>
        </member>
        <member name="P:IEntityOrderReceiverSDX.GuardLookPosition">
            <summary>
            If an entity is guarding a location, this is its look position.
            </summary>
        </member>
        <member name="P:IEntityOrderReceiverSDX.GuardPosition">
            <summary>
            If the entity is guarding a location, this is the position where it is guarding.
            </summary>
        </member>
        <member name="P:IEntityOrderReceiverSDX.PatrolCoordinates">
            <summary>
            If the entity is patrolling, this is the list of coordinates on its route.
            </summary>
        </member>
        <member name="P:IEntityOrderReceiverSDX.Position">
            <summary>
            The entity's current position.
            </summary>
        </member>
        <member name="M:IEntityOrderReceiverSDX.SetupAutoPathingBlocks">
            <summary>
            When this method is called, the entity will scan the area for auto pathing blocks.
            If it is capable of carrying out the orders on those blocks, it will do so.
            </summary>
        </member>
        <member name="M:IEntityOrderReceiverSDX.UpdatePatrolPoints(UnityEngine.Vector3)">
            <summary>
            Updates the list of patrol coordinates with the point at the given position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Lockpicking.Keyhole.OpenLock">
            <summary>
                Call this when the lock is open successfully.
            </summary>
        </member>
        <member name="M:LockEmissive.SetAllMaterials(System.Single)">
            <summary>
                Sets all materials attached to the renderers array
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LockEmissive.SetMaterial(UnityEngine.Material,System.Single)">
            <summary>
                Sets a single material
            </summary>
            <param name="material"></param>
            <param name="value"></param>
        </member>
        <member name="T:MinEventActionGuardClear">
            <summary>
            Clears the guard position.
            
            <example>
            <code>
            &lt;triggered_effect trigger="onSelfBuffUpdate" action="GuardClear, SCore" /&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="T:MinEventActionGuardThere">
            <summary>
            Sets the guard position to where the entity is standing.
            
            <example>
            <code>
            &lt;triggered_effect trigger="onSelfBuffUpdate" action="GuardThere, SCore" /&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="T:MinEventActionModifyRelatedFactionsSDX">
            <summary>
                <para>
                    Changes the target's relationship with the specified faction, and all the specified related
                    factions (if any), according to the relationships between the faction and the related factions.
                </para>
                <para>
                    Supported tag attributes:
                    <list type="bullet">
                        <item>
                            <term>target</term>
                            <description>
                                The entity target(s), to change relationships with the factions.
                                Valid target values: "self", "other", "selfAOE", "otherAOE", "positionAOE".
                                In most cases you should use "self" (the player).
                                Required.
                            </description>
                        </item>
                        <item>
                            <term>range</term>
                            <description>
                                Maximum range (distance in meters) to include entities as targets.
                                Used only when the target is one of the AOE (Area Of Effect) values.
                                Optional.
                            </description>
                        </item>
                        <item>
                            <term>target_tags</term>
                            <description>
                                Adds entities with these tags, to the list of entity targets.
                                Special tag values: "party", "ally", "enemy".
                                Optional.
                            </description>
                        </item>
                        <item>
                            <term>faction</term>
                            <description>
                                The primary faction whose relationship will change with the target.
                                Required.
                            </description>
                        </item>
                        <item>
                            <term>value</term>
                            <description>
                                The amount to add to the relationship between the target and "primary" faction.
                                Positive numbers represent amity, negative numbers represent antagonism.
                                It takes 200 points to change a faction relationship entirely
                                (e.g. from "neutral" to "like").
                                Required.
                            </description>
                        </item>
                        <item>
                            <term>related</term>
                            <description>
                                One or more related factions, whose relationships will change with the target
                                according to each one's relationship with the primary faction.
                                It should be a comma-separated list of faction names (without spaces).
                                You can not include either the target's faction, nor the "primary" faction.
                                Optional; if not specified, no faction relationships are affected, other than the
                                one between the target and primary faction.
                                In this case, it behaves exactly like the ModifyFactionSDX action.
                            </description>
                        </item>
                        <item>
                            <term>scale</term>
                            <description>
                                A ratio by which to scale the target relationship to related factions.
                                Suggested values are between 0 and 1 (exclusive).
                                Optional; defaults to 1.
                                (Ignored if "related" is not specified.)
                            </description>
                        </item>
                    </list>
                </para>
                <para>
                    Default multiplier, to determine the relationship value betwen the target and each related
                    faction, by related faction's relationship with the primary faction.
                    These multipliers are then multiplied by the "scale" property (if specified).
                    <list type="table">
                        <listheader>
                            <term>Relationship to primary faction</term>
                            <description>Value multiplier</description>
                        </listheader>
                        <item>
                            <term>Hate</term>
                            <description>-0.6666667</description>
                        </item>
                        <item>
                            <term>Dislike</term>
                            <description>-0.3333333</description>
                        </item>
                        <item>
                            <term>Neutral</term>
                            <description>0 (no effect)</description>
                        </item>
                        <item>
                            <term>Like</term>
                            <description>0.3333333</description>
                        </item>
                        <item>
                            <term>Love</term>
                            <description>0.6666667</description>
                        </item>
                        <item>
                            <term>Leader</term>
                            <description>1.0</description>
                        </item>
                    </list>
                </para>
            </summary>
            <example>
                <code>
            <!--
                Gives 10 points to the player's relationship with bandits, and adjusts the player's
                relationship with the whisperer faction according to its current relationship with bandits.
                So if the whisperer faction loves bandits, add 6.66.. points to the player's relationship
                with whisperers; if the whisperer faction dislikes (but doesn't hate) bandits, subtract 
                3.33.. points from the player's relationship with whisperers.
            -->
            <triggered_effect trigger="onSelfBuffStart" action="ModifyRelatedFactionsSDX, SCore" target="self" faction="bandits"
                        value="10" related="whisperers" />
            
            <!--
                Gives 10 points to the player's relationship with bandits, adjusts the player's
                relationship with the whisperer faction according to its current relationship with bandits,
                and scales that adjustment by 0.5 (half).
                So if the whisperer faction loves bandits, add 3.33.. points to the player's relationship
                with whisperers; if the whisperer faction dislikes (but doesn't hate) bandits, subtract 
                1.66.. points from the player's relationship with whisperers.
            -->
            <triggered_effect trigger="onSelfBuffStart" action="ModifyRelatedFactionsSDX, SCore" target="self" faction="bandits"
                        value="10" related="whisperers" scale="0.5" />
            
            <!--
                Subtracts 10 points to the player's relationship with white river, and adjust the player's
                relationships with the bandits, red team, blue team, and green team factions according to
                each faction's current relationship with white river.
            -->
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="ModifyRelatedFactionsSDX, SCore" target="self"
                        faction="whiteriver" value="-10" related="bandits,redteam,blueteam,greenteam" />
            
            <!--
                Adds 10 points to the player's relationship with the red team.
                Since the "related" attribute is omitted, it does not modify the player's relationships
                with any other factions.
                In this case, it behaves exactly like ModifyFactionSDX.
            -->
            <triggered_effect trigger="onSelfPrimaryActionEnd" action="ModifyRelatedFactionsSDX, SCore" target="self"
                        faction="redteam" value="10" />
            </code>
            </example>
        </member>
        <member name="T:MinEventActionGuardHere">
            <summary>
            Sets the guard position to where the leader or owner is standing.
            If there is no leader or owner, for example if the order was given by a pathing cube,
            then it sets the guard position to where the entity is standing.
            
            <example>
            <code>
            &lt;triggered_effect trigger="onSelfBuffUpdate" action="GuardHere, SCore" /&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="T:MinEventActionSetFactionRelationship">
            <summary>
            <para>
            Sets the target's relationship with the specified faction.
            </para>
            <para>
            Supported tag attributes:
            <list type="bullet">
                <item>
                    <term>target</term>
                    <description>
                        The entity target(s), to change relationships with the factions.
                        Valid target values: "self", "other", "selfAOE", "otherAOE", "positionAOE".
                        In most cases you should use "self" (the player).
                        Required.
                    </description>
                </item>
                <item>
                    <term>range</term>
                    <description>
                        Maximum range (distance in meters) to include entities as targets.
                        Used only when the target is one of the AOE (Area Of Effect) values.
                        Optional.
                    </description>
                </item>
                <item>
                    <term>target_tags</term>
                    <description>
                        Adds entities with these tags, to the list of entity targets.
                        Special tag values: "party", "ally", "enemy".
                        Optional.
                    </description>
                </item>
                <item>
                    <term>faction</term>
                    <description>
                        The primary faction whose relationship with the target will be set.
                        Required.
                    </description>
                </item>
                <item>
                    <term>value</term>
                    <description>
                        The value of the new relationship between the target and faction.
                        Required.
                    </description>
                </item>
            </list>
            </para>
            <para>
            These are the relationship values you should use for each relationship tier.
            <list type="table">
                <listheader>
                    <term>Relationship tier</term>
                    <description>Relationship values</description>
                </listheader>
                <item>
                    <term>Hate</term>
                    <description>0 - 199</description>
                </item>
                <item>
                    <term>Dislike</term>
                    <description>200 - 399</description>
                </item>
                <item>
                    <term>Neutral</term>
                    <description>400 - 599</description>
                </item>
                <item>
                    <term>Like</term>
                    <description>600 - 799</description>
                </item>
                <item>
                    <term>Love</term>
                    <description>800 - 1000 (1000 is the maximum value)</description>
                </item>
            </list>
            </para>
            </summary>
            <example>
            <code>
            <!-- Sets the player's relationship with bandits to 400 ("Neutral"). -->
            <triggered_effect trigger="onSelfBuffStart" action="SetFactionRelationshipSDX, Mods" target="self" faction="bandits" value="400" />
            </code>
            </example>
        </member>
        <member name="T:ObjectiveRandomTaggedPOIGotoSDX">
            <summary>
            This class is meant to be a replacement for <see cref="T:ObjectiveRandomPOIGoto"/>,
            with these differences:
            <list type="bullet">
            <item>You can specify which tags a POI must have, to be a target for the quest</item>
            <item>You can specify which tags a POI must NOT have, to be a target for the quest</item>
            <item>You can specify the search distance from the quest giver, as either a max distance or a range</item>
            </list>
            </summary>
            <example>
            <code>
            &lt;objective type="RandomTaggedPOIGotoSDX, SCore">
                &lt;!-- Standard objective properties not listed... -->
                &lt;property name="include_tags" value="downtown,industrial"/>
                &lt;property name="exclude_tags" value="rural,wilderness"/>
                &lt;property name="distance" value="300-1000"/>
            &lt;/objective>
            </code>
            </example>
        </member>
        <member name="F:ObjectiveRandomTaggedPOIGotoSDX.PropIncludeTags">
            <summary>
            The name of the property used to include POI tags.
            </summary>
        </member>
        <member name="F:ObjectiveRandomTaggedPOIGotoSDX.PropExcludeTags">
            <summary>
            The name of the property used to exclude POI tags.
            </summary>
        </member>
        <member name="P:ObjectiveRandomTaggedPOIGotoSDX.IncludeTags">
            <summary>
            A prefab must have at least one of these POI tags to be included in the search for POIs.
            </summary>
        </member>
        <member name="P:ObjectiveRandomTaggedPOIGotoSDX.ExcludeTags">
            <summary>
            If a prefab has any of these POI tags, it is excluded from the search for POIs.
            </summary>
        </member>
        <member name="P:ObjectiveRandomTaggedPOIGotoSDX.MinSearchDistance">
            <summary>
            The minimum distance to search. POIs inside this distance will not be returned.
            </summary>
        </member>
        <member name="P:ObjectiveRandomTaggedPOIGotoSDX.MaxSearchDistance">
            <summary>
            The maximum distance to search. POIs outside this distance will not be returned.
            </summary>
        </member>
        <member name="M:ObjectiveRandomTaggedPOIGotoSDX.ParseProperties(DynamicProperties)">
            <summary>
            Parses additional properties from the dynamic properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:ObjectiveRandomTaggedPOIGotoSDX.GetPosition(EntityNPC,EntityPlayer,System.Collections.Generic.List{UnityEngine.Vector2},System.Int32)">
            <summary>
            Gets the POI position. Returns Vector3.Zero if none found.
            </summary>
            <param name="ownerNPC"></param>
            <param name="entityPlayer"></param>
            <param name="usedPoiLocations"></param>
            <param name="entityIdForQuests"></param>
            <returns></returns>
        </member>
        <member name="M:ObjectiveRandomTaggedPOIGotoSDX.Clone">
            <summary>
            Clones this Objective.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ObjectiveRandomTaggedPOIGotoSDX.CopyValues(BaseObjective)">
            <summary>
            Copies the values from another Objective.
            </summary>
            <param name="objective"></param>
        </member>
        <member name="M:ObjectiveRandomTaggedPOIGotoSDX.SetDistanceOffset(UnityEngine.Vector3)">
            <summary>
            Copied verbatim from ObjectiveRandomPOIGoto, made protected so any future subclasses won't
            have to do the same thing.
            </summary>
            <param name="poiSize"></param>
        </member>
        <member name="P:QuestUtils.LoggingEnabled">
            <summary>
            Whether logging is enabled. Defaults to true if the debug menu is enabled.
            Can be set to temporarily override in code for testing, e.g. on the server.
            </summary>
        </member>
        <member name="M:QuestUtils.GetRandomPOINearTrader(EntityTrader,QuestTags,System.Byte,POITags,POITags,System.Single,System.Single,System.Collections.Generic.List{UnityEngine.Vector2},System.Int32,BiomeFilterTypes,System.String)">
            <summary>
            Gets a random POI near a trader. This is meant to be a replacement for
            <see cref="M:DynamicPrefabDecorator.GetRandomPOINearTrader(EntityTrader,QuestTags,System.Byte,System.Collections.Generic.List{UnityEngine.Vector2},System.Int32,BiomeFilterTypes,System.String)"/>,
            except it also handles search distance and POI tags used to include or exclude the prefab.
            </summary>
            <param name="trader"></param>
            <param name="questTag"></param>
            <param name="difficulty"></param>
            <param name="usedPoiLocations"></param>
            <param name="entityIdForQuests"></param>
            <param name="biomeFilterType"></param>
            <param name="biomeFilter"></param>
            <param name="includeTags"></param>
            <param name="excludeTags"></param>
            <returns></returns>
        </member>
        <member name="M:QuestUtils.GetRandomPOINearEntityPos(Entity,QuestTags,System.Byte,POITags,POITags,System.Single,System.Single,System.Collections.Generic.List{UnityEngine.Vector2},System.Int32,BiomeFilterTypes,System.String)">
            <summary>
            Gets a random POI near an entity's position. This is meant to be a replacement for
            <see cref="M:DynamicPrefabDecorator.GetRandomPOINearWorldPos(UnityEngine.Vector2,System.Int32,System.Int32,QuestTags,System.Byte,System.Collections.Generic.List{UnityEngine.Vector2},System.Int32,BiomeFilterTypes,System.String)"/>
            except it accepts the quest giver instead of the world position, and it also handles
            POI tags used to include or exclude the prefab.
            </summary>
            <param name="entity"></param>
            <param name="questTag"></param>
            <param name="difficulty"></param>
            <param name="includeTags"></param>
            <param name="excludeTags"></param>
            <param name="minSearchDistance"></param>
            <param name="maxSearchDistance"></param>
            <param name="usedPOILocations"></param>
            <param name="entityIDforQuests"></param>
            <param name="biomeFilterType"></param>
            <param name="biomeFilter"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QuestUtils.GetTraderPrefabListTier(System.Single)" -->
        <member name="M:QuestUtils.ValidPrefabForQuest(Entity,PrefabInstance,QuestTags,POITags,POITags,System.Collections.Generic.List{UnityEngine.Vector2},System.Int32,BiomeFilterTypes,System.String,System.Single,System.Single)">
            <summary>
            Returns true if the prefab is valid for a quest. Uses all utility validation methods.
            </summary>
            <param name="questGiver"></param>
            <param name="prefab"></param>
            <param name="questTag"></param>
            <param name="includeTags"></param>
            <param name="excludeTags"></param>
            <param name="usedPoiLocations"></param>
            <param name="entityIdForQuests"></param>
            <param name="biomeFilterType"></param>
            <param name="biomeFilter"></param>
            <param name="minSearchDistance"></param>
            <param name="maxSearchDistance"></param>
            <returns></returns>
        </member>
        <member name="M:QuestUtils.MeetsDistanceRequirements(PrefabInstance,Entity,System.Single,System.Single)">
            <summary>
            If min and/or max search distance is provided, returns true if the prefab is within that
            search distance from the quest giver.
            </summary>
            <param name="questGiver"></param>
            <param name="prefab"></param>
            <param name="minSearchDistance"></param>
            <param name="maxSearchDistance"></param>
            <returns></returns>
        </member>
        <member name="M:QuestUtils.MeetsBiomeRequirements(UnityEngine.Vector2,Entity,BiomeFilterTypes,System.String)">
            <summary>
            Returns true if the POI at the specified location meets the biome filter requirements.
            </summary>
            <param name="poiLocation"></param>
            <param name="questGiver"></param>
            <param name="biomeFilterType"></param>
            <param name="biomeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:QuestUtils.MeetsTagRequirements(PrefabInstance,POITags,POITags)">
            <summary>
            Returns true if the POI meets the POI tag requirements.
            If include tags are provided, it must have one or more of those tags;
            if exclude tags are provided, it cannot have any of those tags.
            </summary>
            <param name="prefabInstance"></param>
            <param name="includeTags"></param>
            <param name="excludeTags"></param>
            <returns></returns>
        </member>
        <member name="M:OldMoatGames.GifDecoder.Init">
            Initializes or re-initializes reader
        </member>
        <member name="M:OldMoatGames.GifDecoder.Read">
            Reads a single byte from the input stream.
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadBlock">
            Reads next variable length block from input.
            
            @return number of bytes stored in "buffer"
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadColorTable(System.Int32)">
            Reads color table as 256 RGB integer values
            
            @param ncolors int number of colors to read
            @return int array containing 256 colors (packed ARGB with full alpha)
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadGraphicControlExt">
            Reads Graphics Control Extension values
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadHeader">
            Reads GIF file header information.
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadImage">
            Reads next frame image
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadLsd">
            Reads Logical Screen Descriptor
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadNetscapeExt">
            Reads Netscape extenstion to obtain iteration count
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadShort">
            Reads next 16-bit value, LSB first
        </member>
        <member name="M:OldMoatGames.GifDecoder.ResetFrame">
            Resets frame state for reading next image.
        </member>
        <member name="M:OldMoatGames.GifDecoder.Skip">
            Skips variable length blocks up to and including
            next zero length block.
        </member>
        <member name="T:OldMoatGames.GifDecoder.GifFrame">
            <summary>
                Holds frame data and frame delay
            </summary>
        </member>
        <member name="F:OldMoatGames.GifDecoder.GifFrame.Delay">
            <summary>
                Time in seconds till next frame
            </summary>
        </member>
        <member name="F:OldMoatGames.GifDecoder.GifFrame.Image">
            <summary>
                Frame data
            </summary>
        </member>
        <member name="P:OldMoatGames.GifDecoder.NumberOfFrames">
            <summary>
                Number of frames in GIF. Value is 0 as long as the last frame has not been reached
            </summary>
        </member>
        <member name="P:OldMoatGames.GifDecoder.AllFramesRead">
            <summary>
                Set to true when all frames have been read
            </summary>
        </member>
        <member name="F:OldMoatGames.GifDecoder._inStream">
            <summary>
            </summary>
        </member>
        <member name="M:OldMoatGames.GifDecoder.GetDelayCurrentFrame">
            Gets display duration for specified frame.
            
            @param n int index of frame
            @return delay in milliseconds
        </member>
        <member name="M:OldMoatGames.GifDecoder.GetFrameCount">
            Gets the number of frames read from file.
            @return frame count. Only those frames that are decoded are counted
        </member>
        <member name="M:OldMoatGames.GifDecoder.GetLoopCount">
            Gets the "Netscape" iteration count, if any.
            A count of 0 means repeat indefinitely.
            
            @return iteration count if one was specified, else 1.
        </member>
        <member name="M:OldMoatGames.GifDecoder.GetCurrentFrame">
            Gets the next image frame
            
            @return BufferedImage representation of frame, or null if n is invalid.
        </member>
        <member name="M:OldMoatGames.GifDecoder.GetFrameWidth">
            Gets image width.
            
            @return GIF image width
        </member>
        <member name="M:OldMoatGames.GifDecoder.GetFrameHeight">
            Gets image height.
            
            @return GIF image height
        </member>
        <member name="M:OldMoatGames.GifDecoder.Read(System.IO.Stream)">
            Reads GIF image from stream
            
            @param BufferedInputStream containing GIF file.
            @return read status code (0 = no errors)
        </member>
        <member name="M:OldMoatGames.GifDecoder.Reset">
            Reset reading of the GIF
        </member>
        <member name="M:OldMoatGames.GifDecoder.Close">
            Close the stream
        </member>
        <member name="M:OldMoatGames.GifDecoder.Error">
            Returns true if an error was encountered during reading/decoding
        </member>
        <member name="M:OldMoatGames.GifDecoder.ReadNextFrame(System.Boolean)">
            Reads the next frame
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.Loop">
            <summary>
                Sets the GIF to continue playing from the start after it is finished.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.AutoPlay">
            <summary>
                Sets the GIF to automatically start playing after it is loaded.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.FileName">
            <summary>
                File used for GIF. Use GifPath to set the base path to StreamingAssetsPath, PersistentDataPath or
                TemporaryCachePath.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.Path">
            <summary>
                Path to the GIF.
            </summary>
        </member>
        <member name="P:OldMoatGames.AnimatedGifPlayer.Width">
            <summary>
                Returns the width of the GIF
            </summary>
        </member>
        <member name="P:OldMoatGames.AnimatedGifPlayer.Height">
            <summary>
                Returns the heigth of the GIF
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.CacheFrames">
            <summary>
                Sets caching for decoded frames. Reload the GIF for it to take effect.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.BufferAllFrames">
            <summary>
                Sets buffering for frames. When set all frames are loaded and cached at once. Reload GIF for it to take effect.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.UseThreadedDecoder">
            <summary>
                Sets whether or not the decoder runs in a separate thread
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.CompatibilityMode">
            <summary>
                Sets whether or not to run the player in compatibility mode.
                This mode supports more decoding methods but uses more memory and CPU.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.OverrideTimeScale">
            <summary>
                Sets whether or not playback speed is independent of Time.timeScale.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.TimeScale">
            <summary>
                Sets time scale of Gif playback.
            </summary>
        </member>
        <member name="P:OldMoatGames.AnimatedGifPlayer.TargetComponent">
            <summary>
                The current target component for the GIF. Reload GIF for it to take effect.
            </summary>
        </member>
        <member name="P:OldMoatGames.AnimatedGifPlayer.TargetMaterialNumber">
            <summary>
                The current target material in the component. Used when there is more than 1 material
            </summary>
        </member>
        <member name="P:OldMoatGames.AnimatedGifPlayer.State">
            <summary>
                Current state of the GIF player.
            </summary>
        </member>
        <member name="F:OldMoatGames.AnimatedGifPlayer.GifTexture">
            <summary>
                Texture on which the frame is displayed. Texture should be a RGBA32 texture of the same piel size as the GIF. If no
                texture specified a new one will be created
            </summary>
        </member>
        <member name="T:OldMoatGames.AnimatedGifPlayer.OnReadyAction">
            <summary>
                Called when GIF is ready to play.
            </summary>
        </member>
        <member name="T:OldMoatGames.AnimatedGifPlayer.OnLoadErrorAction">
            <summary>
                Called when GIF could not be loaded.
            </summary>
        </member>
        <member name="M:OldMoatGames.AnimatedGifPlayer.Init">
            <summary>
                Initializes the component with callbacks that are triggered when loading has finished or has failed.
            </summary>
        </member>
        <member name="M:OldMoatGames.AnimatedGifPlayer.Play">
            <summary>
                Start playback.
            </summary>
        </member>
        <member name="M:OldMoatGames.AnimatedGifPlayer.Pause">
            <summary>
                Pause playback.
            </summary>
        </member>
        <member name="M:OldMoatGames.AnimatedGifPlayer.GetNumberOfFrames">
            <summary>
                Returns the number of frames in the GIF. Only shows the number of frames that have been decoded.
            </summary>
            <returns>
                Number of frames
            </returns>
        </member>
        <member name="M:OldMoatGames.AnimatedGifPlayer.Load">
            <summary>
                Start loading the GIF.
            </summary>
        </member>
        <member name="T:UAI.IUAITargetFilter`1">
            <summary>
            This is a common interface for filtering targets for considerations in Utility AI.
            The target's type will be an <see cref="T:Entity"/> (for target entities)
            or a <see cref="T:Vector3d"/> (for waypoints).
            </summary>
            <typeparam name="T">The type of target.</typeparam>
        </member>
        <member name="M:UAI.IUAITargetFilter`1.Test(`0)">
            <summary>
            Test the target.
            </summary>
            <param name="target">The target to test.</param>
            <returns>True if the target passes, false otherwise.</returns>
        </member>
        <member name="T:UAI.UAIFilterIsAlly">
            <summary>
            Filter that tests whether the target entity is an ally of the targeting entity.
            </summary>
        </member>
        <member name="T:UAI.UAIFilterIsEnemy">
            <summary>
            Filter that tests whether the target entity is an enemy of the targeting entity.
            </summary>
        </member>
        <member name="T:UAI.UAIFilterIsSelf">
            <summary>
            Filter that tests whether the target entity is the targeting entity.
            </summary>
        </member>
        <member name="M:UAI.SCoreUtils.StoreAttributes(UAI.UAIPackage,System.Xml.XmlElement)">
            <summary>
            <para>
            Store the attributes for a package.
            </para>
            
            <para>
            The package name cannot be empty. If it is, the attributes will not be stored.
            </para>
            </summary>
            <param name="package">The package.</param>
            <param name="element">The XML element with the attributes to store.</param>
        </member>
        <member name="M:UAI.SCoreUtils.StoreAttributes(UAI.UAIPackage,UAI.UAIAction,System.Xml.XmlElement)">
            <summary>
            <para>
            Store the attributes for an action associated with a package.
            </para>
            
            <para>
            Neither the package name nor the action name can be empty. If either are empty, the
            attributes will not be stored.
            </para>
            </summary>
            <param name="package">The package.</param>
            <param name="action">The action.</param>
            <param name="element">The XML element with the attributes to store.</param>
        </member>
        <member name="T:UAI.SCoreUtils.HitMasks">
            <summary>
            These hit mask values are taken verbatim from Voxel.raycastNew.
            The names represent whether a raycast should <em>collide with</em> the block.
            </summary>
        </member>
        <member name="T:UAI.UAITaskGuard">
             <summary>
             Guards a position. If the entity is not at its guard position, it will path its way back to it.
             The guard position must already be set, for example from <see cref="T:MinEventActionGuardHere"/>.
            
             <example>
             <code>
             &lt;task class="Guard, SCore" /&gt;
             </code>
             </example>
             </summary>
        </member>
    </members>
</doc>
